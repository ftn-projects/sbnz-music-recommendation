package rules.profileBackwards;

import com.ftn.model.Profile;
import com.ftn.model.Trait;
import com.ftn.model.Genre;

/**
 * The profile "has" a trait if:
 *  - Base case: the profile directly lists this trait's ID in profile.traitIds, OR
 *  - Recursive: the trait has a parent, and the profile "has" that parent (walks down the chain).
 *
 * This supports scenarios like:
 *   profile --has--> Relaxed Parent
 *   Chill Child.parentId = Relaxed Parent.id
 *   => profileHasTrait(profile, Chill Child) is true
 */
query profileHasTrait(Profile $profile, Trait $trait)
    // Base case: direct possession
    Profile(this == $profile, traitIds contains $trait.id)
or
    // Recursive: parent â‡’ child (profile has parent, so it has this child)
    (
        Trait(this == $trait, parentId != null, $parentId : parentId)
        and $parent : Trait(id == $parentId)
        and profileHasTrait($profile, $parent;)
    )
end

/**
 * True if ANY trait that maps to the genre is held by the profile (directly or via parent chain).
 */
query genreAlignsWithProfile(Profile $profile, Genre $genre)
    Genre(this == $genre, $genreId : id)
    and $trait : Trait(genreIds contains $genreId)
    and profileHasTrait($profile, $trait;)
end
